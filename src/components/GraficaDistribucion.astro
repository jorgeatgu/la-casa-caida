---
const chartId = "aragon-stack";
---

<div class="grafica-container">
  <article class="aragon-stack" id={chartId}>
    <svg>
      <g class="aragon-stack-container"></g>
    </svg>
  </article>
</div>

<script define:vars={{ chartId }} type="module">
  import { select } from 'd3-selection';
  import { min, max, bisector, extent } from 'd3-array';
  import { curveCardinal, area, stack, stackOrderInsideOut } from 'd3-shape';
  import { scaleTime, scaleLinear, scaleOrdinal } from 'd3-scale';
  import { axisBottom, axisLeft } from 'd3-axis';
  import { csv } from 'd3-fetch';
  import { format } from 'd3-format';

  document.addEventListener('DOMContentLoaded', () => {
    const margin = { top: 24, right: 8, bottom: 24, left: 32 };
    const chart = select('#aragon-stack');
    const svg = chart.select('svg');
    const scales = {};
    const bisectDate = bisector(d => d.year).left;

    // Añadir tooltip
    const tooltipStack = chart
      .append('div')
      .attr('class', 'tooltip tooltip-stack')
      .style('opacity', 0);

    // Configurar tamaño
    const width = chart.node().offsetWidth - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    svg.attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom);

    const g = svg.select('.aragon-stack-container')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    // Cargar datos
    csv('/data/aragon-total.csv').then(data => {
      data.forEach(d => {
        d.year = +d.year;
        d.huesca = +d.huesca;
        d.teruel = +d.teruel;
        d.zaragoza = +d.zaragoza;
        d.huescaP = +d.huescaP;
        d.teruelP = +d.teruelP;
        d.zaragozaP = +d.zaragozaP;
        d.aragon = +d.aragon;
      });

      // Configurar elementos
      g.append('g').attr('class', 'axis axis-x');
      g.append('g').attr('class', 'axis axis-y');
      g.append('g').attr('class', 'aragon-stack-container-bis');

      g.append('text')
        .attr('class', 'legend-aragon')
        .attr('y', '70%')
        .attr('x', '1%')
        .text('Zaragoza');

      g.append('text')
        .attr('class', 'legend-aragon')
        .attr('y', '5%')
        .attr('x', '1%')
        .text('Huesca');

      g.append('text')
        .attr('class', 'legend-aragon')
        .attr('y', '30%')
        .attr('x', '1%')
        .text('Teruel');

      // Configurar interactividad
      g.append('rect').attr('class', 'overlay-dos');

      g.append('g')
        .attr('class', 'focus')
        .style('display', 'none')
        .append('line')
        .attr('class', 'x-hover-line hover-line')
        .attr('y1', 0);

      // Configurar escalas
      const x = scaleTime()
        .domain(extent(data, d => d.year))
        .range([0, width]);

      const y = scaleLinear()
        .domain([0, 100])
        .range([height, 0]);

      // Preparar datos para stack
      const keys = data.columns.slice(5);

      const areaGenerator = area()
        .x(d => x(d.data.year))
        .y0(d => y(d[0]))
        .y1(d => y(d[1]))
        .curve(curveCardinal.tension(0.6));

      const stackGenerator = stack().keys(keys).order(stackOrderInsideOut);

      const stackedData = stackGenerator(data);

      const colors = scaleOrdinal()
        .domain(keys)
        .range(['#F67460', '#C54073', '#5A1C7C']);

      // Dibujar áreas
      g.select('.aragon-stack-container-bis')
        .selectAll('.area-stack')
        .data(stackedData)
        .enter()
        .append('path')
        .attr('fill', d => colors(d.key))
        .attr('d', areaGenerator)
        .attr('class', 'area-stack');

      // Configurar ejes
      const axisX = axisBottom(x)
        .tickFormat(format('d'))
        .tickPadding(7)
        .ticks(9);

      g.select('.axis-x')
        .attr('transform', `translate(0,${height})`)
        .call(axisX);

      const axisY = axisLeft(y)
        .tickFormat(d => d + '%')
        .tickSizeInner(-width)
        .ticks(12);

      g.select('.axis-y').call(axisY);

      // Configurar interactividad
      const focus = g.select('.focus');
      const overlay = g.select('.overlay-dos');

      focus.select('.x-hover-line').attr('y2', height);

      overlay
        .attr('width', width + margin.left + margin.right)
        .attr('height', height)
        .style('fill', 'transparent')
        .on('mouseover', function() {
          focus.style('display', null);
        })
        .on('mouseout', function() {
          focus.style('display', 'none');
          tooltipStack.style('opacity', 0);
        })
        .on('mousemove', mousemove);

      function mousemove(event) {
        const { layerX } = event;
        const w = chart.node().offsetWidth;
        var x0 = x.invert(layerX),
          i = bisectDate(data, x0, 1),
          d0 = data[i - 1],
          d1 = data[i],
          d = x0 - d0.year > d1.year - x0 ? d1 : d0;
        const positionX = x(d.year) + margin.left;
        const postionWidthTooltip = positionX + 200;
        const positionRightTooltip = w - positionX;

        tooltipStack
          .style('opacity', 1)
          .html(`
            <span class="tooltip-stack-number tooltip-stack-text">${d.year}</span>
            <span class="tooltip-stack-text">Huesca: <span class="tooltip-number">${d.huescaP}% - ${d.huesca} hab.</span></span>
            <span class="tooltip-stack-text">Teruel: <span class="tooltip-number">${d.teruelP}% - ${d.teruel} hab.</span></span>
            <span class="tooltip-stack-text">Zaragoza: <span class="tooltip-number">${d.zaragozaP}% - ${d.zaragoza} hab.</span></span>
            <span class="tooltip-stack-text">Total: <span class="tooltip-number">${d.aragon} hab.</span></span>
          `)
          .style('top', '35%')
          .style('left', postionWidthTooltip > w ? 'auto' : `${positionX}px`)
          .style('right', postionWidthTooltip > w ? positionRightTooltip + 'px' : 'auto');

        focus
          .select('.x-hover-line')
          .attr('transform', `translate(${x(d.year)},0)`);
      }
    });
  });
</script>
