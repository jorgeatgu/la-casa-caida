---
// Modificamos para recibir también la provincia como prop
const { municipios, provincia } = Astro.props;

// Función para capitalizar la primera letra de una cadena
function capitalizar(texto) {
  return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();
}

// Capitalizamos el nombre de la provincia para el título
const provinciaNombre = capitalizar(provincia);
---
<section class="municipios-section">
  <h2>Municipios de {provinciaNombre}</h2>
  <div class="filtro-container">
    <input type="text" id="filtroMunicipios" placeholder="Buscar municipios..." class="filtro-input" />
    <button type="button" id="limpiarFiltro" class="limpiar-filtro" aria-label="Limpiar búsqueda">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="limpiar-icono">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
  <div class="contador-resultados">
    Mostrando {municipios.length} municipios
  </div>
  <div class="municipios-grid" id="municipiosGrid">
    {municipios.map((municipio) => (
    <a href={`/municipio/${municipio.slug}`} class="municipio-card-link">
      <div class="municipio-card">
        <h3>{municipio.nombre}</h3>
        <p>{municipio.poblacionActual?.toLocaleString() || "Sin datos"} habitantes</p>
        {municipio.poblacionActual > 0 && municipio.poblacionActual < 100 && ( <span class="municipio-card-badge">En riesgo</span>
          )}
          <span class="ver-mas">Ver detalles →</span>
      </div>
    </a>
    ))}
  </div>
</section>
<script>
// Script del lado del cliente para la funcionalidad de filtrado
document.addEventListener('DOMContentLoaded', () => {
  const filtroInput = document.getElementById('filtroMunicipios');
  const limpiarFiltroBtn = document.getElementById('limpiarFiltro');
  const municipiosGrid = document.getElementById('municipiosGrid');
  const contadorResultados = document.querySelector('.contador-resultados');

  if (!filtroInput || !municipiosGrid || !limpiarFiltroBtn) return;

  // Ocultar inicialmente el botón de limpiar
  limpiarFiltroBtn.style.display = 'none';

  // Función de filtrado
  function filtrarMunicipios() {
    const textoBusqueda = filtroInput.value.toLowerCase().trim();
    const tarjetas = municipiosGrid.querySelectorAll('.municipio-card-link');
    let resultadosEncontrados = 0;

    // Mostrar/ocultar el botón de limpiar según si hay texto
    limpiarFiltroBtn.style.display = textoBusqueda.length > 0 ? 'flex' : 'none';

    tarjetas.forEach(tarjeta => {
      const nombreMunicipio = tarjeta.querySelector('h3').textContent.toLowerCase();

      if (nombreMunicipio.includes(textoBusqueda)) {
        tarjeta.style.display = 'block';
        resultadosEncontrados++;

        // Animación para resaltar coincidencias
        if (textoBusqueda.length > 0) {
          tarjeta.style.animationName = 'pulseHighlight';
          tarjeta.style.animationDuration = '1s';
          setTimeout(() => {
            tarjeta.style.animationName = '';
          }, 1000);
        }
      } else {
        tarjeta.style.display = 'none';
      }
    });

    // Actualizar contador
    const total = tarjetas.length;
    contadorResultados.textContent = resultadosEncontrados === total ?
      `Mostrando todos los municipios (${total})` :
      `Mostrando ${resultadosEncontrados} de ${total} municipios`;

    // Mensaje cuando no hay resultados
    const noResultadosMsg = document.getElementById('noResultadosMsg');

    if (resultadosEncontrados === 0 && textoBusqueda.length > 0) {
      if (!noResultadosMsg) {
        const mensaje = document.createElement('div');
        mensaje.id = 'noResultadosMsg';
        mensaje.className = 'no-resultados';
        mensaje.textContent = `No se encontraron municipios que coincidan con "${textoBusqueda}"`;
        municipiosGrid.insertAdjacentElement('afterend', mensaje);
      }
    } else if (noResultadosMsg) {
      noResultadosMsg.remove();
    }
  }

  // Evento de input para filtrar mientras se escribe
  filtroInput.addEventListener('input', filtrarMunicipios);

  // Funcionalidad de limpiar el input
  limpiarFiltroBtn.addEventListener('click', () => {
    filtroInput.value = '';
    filtroInput.focus();
    filtrarMunicipios(); // Volver a mostrar todos los municipios

    // Efecto de rebote para las tarjetas cuando se limpia
    municipiosGrid.querySelectorAll('.municipio-card-link').forEach((card, index) => {
      setTimeout(() => {
        card.classList.add('bounce');
        setTimeout(() => card.classList.remove('bounce'), 500);
      }, index * 30);
    });
  });

  // También limpiar cuando se presiona Escape mientras el input tiene foco
  filtroInput.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      filtroInput.value = '';
      limpiarFiltroBtn.style.display = 'none';
      filtrarMunicipios();
      filtroInput.blur(); // Quitar el foco del input
    }
  });

  // Funcionalidad para ordenar municipios por población o alfabéticamente
  const crearSelectorOrdenamiento = () => {
    const selectorContainer = document.createElement('div');
    selectorContainer.className = 'ordenamiento-container';

    const selectorLabel = document.createElement('label');
    selectorLabel.htmlFor = 'ordenarPor';
    selectorLabel.textContent = 'Ordenar por: ';

    const selector = document.createElement('select');
    selector.id = 'ordenarPor';
    selector.className = 'ordenar-select';

    const opciones = [
      { value: 'alfabetico', text: 'Alfabético (A-Z)' },
      { value: 'poblacion-desc', text: 'Población (mayor a menor)' },
      { value: 'poblacion-asc', text: 'Población (menor a mayor)' }
    ];

    opciones.forEach(opcion => {
      const option = document.createElement('option');
      option.value = opcion.value;
      option.textContent = opcion.text;
      selector.appendChild(option);
    });

    selectorContainer.appendChild(selectorLabel);
    selectorContainer.appendChild(selector);

    // Insertar después del contador de resultados
    contadorResultados.insertAdjacentElement('afterend', selectorContainer);

    // Manejar el cambio de ordenamiento
    selector.addEventListener('change', () => {
      ordenarMunicipios(selector.value);
    });
  };

  // Corregimos la función de ordenamiento
  const ordenarMunicipios = (criterio) => {
    const tarjetas = Array.from(municipiosGrid.querySelectorAll('.municipio-card-link'));

    tarjetas.sort((a, b) => {
      const nombreA = a.querySelector('h3').textContent;
      const nombreB = b.querySelector('h3').textContent;

      // Extraemos el texto completo de población
      const poblacionTextoA = a.querySelector('p').textContent;
      const poblacionTextoB = b.querySelector('p').textContent;

      // Usamos una expresión regular mejorada que capture números con separadores de miles
      // o convertimos el texto directamente eliminando puntos y extrayendo solo los dígitos
      const extraerNumero = (texto) => {
        if (texto.includes("Sin datos")) return 0;
        // Quitamos los puntos y extraemos solo los dígitos
        return parseInt(texto.replace(/\./g, '').match(/\d+/)[0], 10);
      };

      const poblacionA = extraerNumero(poblacionTextoA);
      const poblacionB = extraerNumero(poblacionTextoB);

      if (criterio === 'alfabetico') {
        return nombreA.localeCompare(nombreB);
      } else if (criterio === 'poblacion-desc') {
        return poblacionB - poblacionA;
      } else if (criterio === 'poblacion-asc') {
        return poblacionA - poblacionB;
      }
    });

    // Reordenar en el DOM
    tarjetas.forEach(tarjeta => {
      municipiosGrid.appendChild(tarjeta);
    });

    // Aplicar efecto visual para indicar el cambio
    tarjetas.forEach((card, index) => {
      setTimeout(() => {
        card.classList.add('reordered');
        setTimeout(() => card.classList.remove('reordered'), 500);
      }, index * 20);
    });
  };

  // Crear el selector de ordenamiento
  crearSelectorOrdenamiento();

  // Animación de entrada para las tarjetas
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: .1
  };

  const observerCallback = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animated');
        observer.unobserve(entry.target);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  document.querySelectorAll('.municipio-card-link').forEach((card, index) => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(20px)';
    card.style.transition = `opacity .5s ease, transform .5s ease ${index * .05}s`;
    observer.observe(card);
  });

  document.addEventListener('scroll', () => {
    document.querySelectorAll('.municipio-card-link').forEach((card) => {
      const rect = card.getBoundingClientRect();
      if (rect.top <= window.innerHeight * .8 && rect.bottom >= 0) {
        card.style.opacity = '1';
        card.style.transform = 'translateY(0)';
      }
    });
  });

  window.dispatchEvent(new Event('scroll'));
});
</script>
<style>
.municipios-section {
  margin-top: 3rem;
  padding: 2rem 1rem;
}

.municipios-section h2 {
  text-align: center;
  margin-bottom: 1.5rem;
  font-size: 2rem;
  font-family: var(--title);
  color: #333;
}

.filtro-container {
  max-width: 600px;
  margin: 0 auto 1.5rem;
  position: relative;
  display: flex;
  align-items: center;
}

.filtro-input {
  width: 100%;
  padding: 1rem 3rem 1rem 1.5rem;
  border-radius: 30px;
  border: 2px solid rgba(0, 0, 0, .1);
  font-size: 1rem;
  background-color: rgba(255, 255, 255, .9);
  transition: all .3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, .05);
}

.filtro-input:focus {
  outline: none;
  border-color: #0a3d62;
  box-shadow: 0 6px 18px rgba(0, 0, 0, .1);
}

.limpiar-filtro {
  position: absolute;
  right: 15px;
  display: none;
  align-items: center;
  justify-content: center;
  width: 22px;
  height: 22px;
  border-radius: 50%;
  background-color: rgba(0, 0, 0, .1);
  border: none;
  cursor: pointer;
  transition: all .3s ease;
  padding: 0;
  color: #555;
  z-index: 2;
}

.limpiar-filtro:hover,
.limpiar-filtro:focus {
  background-color: rgba(0, 0, 0, .2);
  transform: scale(1.1);
}

.limpiar-icono {
  width: 14px;
  height: 14px;
}

.contador-resultados {
  text-align: center;
  font-size: .9rem;
  color: #666;
  margin-bottom: 1rem;
  font-family: var(--text);
}

/* Estilos mejorados para el selector de ordenamiento */

.ordenamiento-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 1.5rem auto;
  position: relative;
  max-width: 600px;
}

/* Estilo para la etiqueta */
.ordenamiento-label {
  margin-right: .8rem;
  font-size: .95rem;
  color: #555;
  font-family: var(--text);
  font-weight: 500;
}

.ordenar-select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-color: rgba(255, 255, 255, .95);
  border: 2px solid rgba(0, 0, 0, .08);
  border-radius: 25px;
  padding: .6rem 2.5rem .6rem 1.2rem;
  font-size: .9rem;
  color: #333;
  box-shadow: 0 2px 8px rgba(0, 0, 0, .05);
  cursor: pointer;
  transition: all .25s ease;
  font-family: var(--text);
  width: auto;
  min-width: 220px;
}

.ordenamiento-container::after {
  content: '';
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%);
  width: 10px;
  height: 10px;
  border-right: 2px solid #555;
  border-bottom: 2px solid #555;
  transform: translateY(-60%) rotate(45deg);
  pointer-events: none;
  transition: transform .3s ease;
}

/* Efecto hover */
.ordenar-select:hover {
  border-color: rgba(10, 61, 98, .3);
  box-shadow: 0 4px 12px rgba(0, 0, 0, .1);
}

/* Efecto focus */
.ordenar-select:focus {
  outline: none;
  border-color: #0a3d62;
  box-shadow: 0 0 0 3px rgba(10, 61, 98, .15);
}

/* Rotación de la flecha cuando el select está abierto */
.ordenar-select:focus + .ordenamiento-container::after {
  transform: translateY(-40%) rotate(-135deg);
}

/* Estilo para las opciones del select (solo funciona en algunos navegadores) */
.ordenar-select option {
  padding: 10px;
  background-color: white;
  color: #333;
}

/* Media query para dispositivos móviles */
@media (max-width: 600px) {
  .ordenamiento-container {
    flex-direction: column;
    align-items: stretch;
  }

  .ordenamiento-label {
    margin-right: 0;
    margin-bottom: .5rem;
    text-align: center;
  }

  .ordenar-select {
    width: 100%;
    min-width: unset;
  }
}
.no-resultados {
  text-align: center;
  padding: 2rem;
  background-color: rgba(255, 255, 255, .9);
  border-radius: 10px;
  margin: 2rem auto;
  max-width: 600px;
  font-family: var(--text);
  color: #555;
  box-shadow: 0 4px 15px rgba(0, 0, 0, .08);
}

.municipios-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.8rem;
  margin-top: 1.5rem;
}

.municipio-card-link {
  text-decoration: none;
  color: inherit;
  display: block;
  transition: transform .3s ease;
}

.municipio-card-link:hover {
  transform: translateY(-6px);
}

.municipio-card {
  background-color: rgba(255, 255, 255, .9);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, .08);
  transition: all .3s ease;
  border: 1px solid rgba(0, 0, 0, .05);
  position: relative;
  overflow: hidden;
}

.municipio-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 5px;
  background: linear-gradient(90deg, #0a3d62, #27ae60);
  opacity: 0;
  transition: opacity .3s ease;
}

.municipio-card:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, .15);
}

.municipio-card:hover::before {
  opacity: 1;
}

.municipio-card h3 {
  font-size: 1.4rem;
  margin-top: 0;
  margin-bottom: .8rem;
  color: #0a3d62;
  font-family: var(--title);
}

.municipio-card p {
  color: #555;
  margin-bottom: 1rem;
  font-family: var(--text);
}

.ver-mas {
  display: inline-block;
  font-size: .9rem;
  color: #0a3d62;
  font-weight: 500;
  transition: transform .2s ease;
}

.municipio-card:hover .ver-mas {
  transform: translateX(5px);
}

.municipio-card-badge {
  position: absolute;
  top: 0;
  right: 0;
  background: linear-gradient(45deg, #c0392b, #e74c3c);
  color: white;
  font-size: .7rem;
  padding: .3rem .6rem;
  border-radius: 0 0 0 8px;
  font-weight: 500;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulseHighlight {
  0% {
    box-shadow: 0 4px 15px rgba(0, 0, 0, .08);
  }

  50% {
    box-shadow: 0 4px 20px rgba(10, 61, 98, .3);
  }

  100% {
    box-shadow: 0 4px 15px rgba(0, 0, 0, .08);
  }
}

@keyframes bounce {

  0%,
  100% {
    transform: translateY(0);
  }

  50% {
    transform: translateY(-8px);
  }
}

@keyframes reordered {
  0% {
    background-color: rgba(10, 61, 98, .1);
  }

  100% {
    background-color: rgba(255, 255, 255, .9);
  }
}

.municipio-card-link.animated {
  animation: fadeInUp .5s ease forwards;
}

.municipio-card-link.bounce .municipio-card {
  animation: bounce .5s ease;
}

.municipio-card-link.reordered .municipio-card {
  animation: reordered .5s ease;
}

@media (max-width: 768px) {
  .municipios-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.2rem;
  }

  .filtro-input {
    padding: .8rem 2.5rem .8rem 1.2rem;
  }

  .municipio-card {
    padding: 1.2rem;
  }

  .ordenamiento-container {
    flex-direction: column;
    gap: .5rem;
  }
}
</style>
