---
const { municipio, codigo, provincia } = Astro.props;
const chartId = `grafica-vegetativo-${codigo || provincia}`;
const containerClass = `bar-negative-${provincia}`;
const containerSelector = `bar-negative-${provincia}-container`;
const containerBisSelector = `bar-negative-${provincia}-container-bis`;
---

<div class="grafica-container">
  <div class={containerClass}>
    <svg>
      <g class={containerSelector}></g>
    </svg>
  </div>
</div>

<script define:vars={{ municipio, codigo, provincia, chartId, containerClass, containerSelector, containerBisSelector }}>
  document.addEventListener('DOMContentLoaded', () => {
    const margin = { top: 24, right: 8, bottom: 24, left: 40 };
    let width = 0;
    let height = 0;
    let w = 0;
    let h = 0;
    const chart = d3.select(`.${containerClass}`);
    const svg = chart.select('svg');
    const scales = {};
    let dataVegetative;
    const tooltip = chart
      .append('div')
      .attr('class', 'tooltip tooltip-negative')
      .style('opacity', 0);

    function setupScales() {
      const saldoMin = d3.min(dataVegetative, d => d.saldo);
      const saldoMax = d3.max(dataVegetative, d => d.saldo);

      const saldoMaxMin = -500;
      const saldoMaxMax = 300;

      const countX = d3.scaleBand().domain(dataVegetative.map(d => d.year));

      const countY = d3
        .scaleLinear()
        .domain([
          d3.min(dataVegetative, d => d.saldo * 2),
          d3.max(dataVegetative, d =>
            saldoMax < saldoMaxMax
              ? d3.max(dataVegetative, d => d.saldo * 6)
              : d3.max(dataVegetative, d => d.saldo * 2.5)
          )
        ]);

      scales.count = { x: countX, y: countY };
    }

    function setupElements() {
      const g = svg.select(`.${containerSelector}`);

      g.append('g').attr('class', 'axis axis-x');
      g.append('g').attr('class', 'axis axis-y');
      g.append('g').attr('class', containerBisSelector);
    }

    function updateScales(width, height) {
      const { count: { x, y } } = scales
      x.rangeRound([0, width]).paddingInner(0.2);
      y.range([height, 0]);
    }

    function drawAxes(g) {
      const axisX = d3.axisBottom(scales.count.x).tickValues(
        scales.count.x.domain().filter((d, i) => {
          return !(i % 6);
        })
      );

      g.select('.axis-x').attr('transform', `translate(0,${height})`).call(axisX);

      const axisY = d3
        .axisLeft(scales.count.y)
        .tickFormat(d3.format('d'))
        .ticks(5)
        .tickSize(-width)
        .tickPadding(8);

      g.select('.axis-y').call(axisY);
    }

    function updateChart(dataVegetative) {
      w = chart.node().offsetWidth;
      h = 600;

      const { left, right, top, bottom } = margin

      width = w - left - right;
      height = h - top - bottom;

      svg.attr('width', w).attr('height', h);

      const g = svg.select(`.${containerSelector}`);

      g.attr('transform', `translate(${left},${top})`);

      updateScales(width, height);

      const container = chart.select(`.${containerBisSelector}`);

      container
        .selectAll('.bar-vertical')
        .data(dataVegetative)
        .join('rect')
        .attr('class', d => (d.saldo < 0 ? 'negative bar-vertical' : 'positive bar-vertical'))
        .on('mouseover', function(event, d) {
          tooltip.transition();
          tooltip
            .style('opacity', 1)
            .html(
              `
              <p class="tooltip-year"><span class="tooltip-number">${d.year}</span><p/>
              <p class="tooltip-born">Nacidos: <span class="tooltip-number">${d.nacidos}</span><p/>
              <p class="tooltip-deceased">Fallecidos: <span class="tooltip-number">${d.fallecidos}</span><p/>
              <p class="tooltip-deceased">Saldo: <span class="tooltip-number">${d.saldo}</span><p/>
              `
            )
            .style('left', w / 2 - 100 + 'px')
            .style('top', 50 + 'px');
        })
        .on('mouseout', function() {
          tooltip.transition().duration(200).style('opacity', 0);
        })
        .attr('width', scales.count.x.bandwidth())
        .attr('x', d => scales.count.x(d.year))
        .attr('y', d =>
          d.saldo > 0 ? scales.count.y(d.saldo) : scales.count.y(0)
        )
        .attr('height', d =>
          Math.abs(scales.count.y(d.saldo) - scales.count.y(0))
        );

      drawAxes(g);
    }

    function resize() {
      updateChart(dataVegetative);
    }

    function loadData() {
      const csvPath = `/data/${provincia}/saldo-vegetativo-total-${provincia}.csv`;

      d3.csv(csvPath).then(data => {
        // Convertimos los valores numÃ©ricos
        data.forEach(d => {
          d.year = +d.year;
          d.nacidos = +d.nacidos;
          d.fallecidos = +d.fallecidos;
          d.saldo = +d.saldo;
        });

        dataVegetative = data;
        setupElements();
        setupScales();
        updateChart(dataVegetative);
      }).catch(error => {
        console.error(`Error cargando datos de ${csvPath}:`, error);
      });
    }

    window.addEventListener('resize', resize);
    loadData();
  });
</script>

<style>
  .grafica-container {
    position: relative;
    margin: 1rem 0;
  }

  .positive {
    fill: #8BC34A;
  }

  .negative {
    fill: #FF5252;
  }

  .tooltip {
    position: absolute;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    pointer-events: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .tooltip-year {
    font-weight: bold;
    margin-bottom: 5px;
    text-align: center;
  }

  .tooltip-number {
    font-weight: bold;
  }
</style>
