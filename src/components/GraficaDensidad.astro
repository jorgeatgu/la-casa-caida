---
const { municipio, codigo, provincia } = Astro.props;
const chartId = `grafica-densidad-${codigo}`;
---

<div class="grafica-container">
  <div class="line-densidad" id={chartId}></div>
</div>

<script define:vars={{ municipio, codigo, provincia, chartId }} type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const margin = { top: 20, right: 20, bottom: 40, left: 96 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const container = d3.select(`#${chartId}`);

    const svg = container.append("svg")
      .attr("width", "100%")
      .attr("height", height + margin.top + margin.bottom)
      .attr("viewBox", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    const csvPath = `/data/${provincia}/${provincia}-densidad.csv`;

    d3.csv(csvPath).then(data => {
      // Filtrar por el municipio actual
      const municipioData = data.filter(d => d.municipio === municipio || d.name === municipio);

      municipioData.forEach(d => {
        d.year = +d.year;
        d.population = +d.population;
        d.superficie = +d.superficie;
        d.densidad = (d.population / d.superficie);
      });

      // Ordenar por año para asegurar la correcta visualización
      municipioData.sort((a, b) => a.year - b.year);

      const x = d3.scaleTime()
        .domain(d3.extent(municipioData, d => d.year))
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(municipioData, d => d.densidad) * 1.2])
        .range([height, 0]);

      const lineGenerator = d3.line()
        .x(d => x(d.year))
        .y(d => y(d.densidad));

      // Añadir ejes
      svg.append("g")
        .attr("class", "axis axis-x")
        .attr("transform", `translate(0,${height})`)
        .call(d3.axisBottom(x).tickFormat(d3.format('d')).ticks(10));

      svg.append("g")
        .attr("class", "axis axis-y")
        .call(d3.axisLeft(y).tickFormat(d => d + " hab/km²").tickSize(-width).ticks(6));

      // Añadir etiquetas de los ejes
      svg.append("text")
        .attr("class", "axis-label x-label")
        .attr("text-anchor", "middle")
        .attr("transform", `translate(${width/2}, ${height + margin.bottom - 5})`)
        .text("Año");

      svg.append("text")
        .attr("class", "axis-label y-label")
        .attr("text-anchor", "middle")
        .attr("transform", `translate(${-margin.left/2 - 15}, ${height/2}) rotate(-90)`)
        .text("Densidad (hab/km²)");

      // Dibujar la línea
      svg.append("path")
        .datum(municipioData)
        .attr("class", "lines")
        .attr("fill", "none")
        .attr("stroke", "#1a73e8")
        .attr("stroke-width", 2)
        .attr("d", lineGenerator);

      // Añadir puntos con interactividad
      const tooltip = d3.select("body")
        .append("div")
        .attr("class", "tooltip")
        .style("opacity", 0)
        .style("position", "absolute")
        .style("background", "white")
        .style("padding", "8px")
        .style("border-radius", "4px")
        .style("box-shadow", "0 2px 4px rgba(0,0,0,0.2)")
        .style("pointer-events", "none");

      svg.selectAll(".data-point")
        .data(municipioData)
        .enter()
        .append("circle")
        .attr("class", "data-point")
        .attr("cx", d => x(d.year))
        .attr("cy", d => y(d.densidad))
        .attr("r", 4)
        .attr("fill", d => d.densidad < 10 ? "#f44336" : "#1a73e8")
        .attr("stroke", "#fff")
        .attr("stroke-width", 2)
        .on("mouseover", function(event, d) {
          d3.select(this)
            .attr("r", 6)
            .attr("stroke-width", 3);

          tooltip.transition()
            .duration(200)
            .style("opacity", 0.9);

          tooltip.html(`
            <strong>${d.year}</strong><br>
            Población: ${d.population.toLocaleString()} habitantes<br>
            Superficie: ${d.superficie.toLocaleString()} km²<br>
            Densidad: ${d.densidad.toFixed(2)} hab/km²
            ${d.densidad < 10 ? "<br><strong>¡Desierto demográfico!</strong>" : ""}
          `)
            .style("left", (event.pageX + 10) + "px")
            .style("top", (event.pageY - 28) + "px");
        })
        .on("mouseout", function() {
          d3.select(this)
            .attr("r", 4)
            .attr("stroke-width", 2);

          tooltip.transition()
            .duration(500)
            .style("opacity", 0);
        });

      // Añadir mensaje de desierto demográfico si aplica
      const currentDensity = municipioData[municipioData.length - 1].densidad;

      if (currentDensity < 10) {
        const alertContainer = container.append("div")
          .attr("class", "densidad-alerta")
          .style("position", "absolute")
          .style("top", "20px")
          .style("right", "20px")
          .style("background-color", "rgba(244, 67, 54, 0.1)")
          .style("border", "1px solid #f44336")
          .style("border-radius", "4px")
          .style("padding", "10px")
          .style("max-width", "250px");

        alertContainer.append("p")
          .style("margin", "0")
          .style("font-size", "14px")
          .html("<strong>Desierto demográfico</strong>: Una densidad inferior a 10 hab/km² convierte al municipio en un desierto demográfico.");
      }
    }).catch(error => {
      console.error("Error al cargar los datos:", error);
      container.html('<div class="error-message">No se pudieron cargar los datos. Por favor, inténtelo de nuevo más tarde.</div>');
    });
  });
</script>

<style>
  .grafica-container {
    margin: 2rem 0;
    width: 100%;
    position: relative;
  }

  .line-densidad {
    width: 100%;
    position: relative;
  }

  .axis-label {
    font-size: 0.85rem;
    fill: #666;
  }

  .error-message {
    color: #d32f2f;
    padding: 2rem;
    text-align: center;
    border: 1px solid #ffcdd2;
    background-color: #ffebee;
    border-radius: 4px;
  }
</style>
