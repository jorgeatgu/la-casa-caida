---
const { municipio, codigo, provincia } = Astro.props;
const chartId = `grafica-densidad-${codigo}`;
---

<div class="grafica-container">
  <div class="line-densidad" id={chartId}></div>
</div>

<script define:vars={{ municipio, codigo, provincia, chartId }} type="module">
  import * as d3 from 'https://cdn.jsdelivr.net/npm/d3@7/+esm';


  document.addEventListener('DOMContentLoaded', () => {
    const margin = { top: 16, right: 16, bottom: 24, left: 96 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const container = d3.select(`#${chartId}`);

    const svg = container.append("svg")
      .attr("width", "100%")
      .attr("height", height + margin.top + margin.bottom)
      .attr("viewBox", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);

    const csvPath = `/data/${provincia}/${provincia}-densidad.csv`;

    d3.csv(csvPath).then(data => {
      // Filtrar por código INE
      const municipioData = data.filter(d => d.municipio === municipio || d.name === municipio);

      municipioData.forEach(d => {
        d.year = +d.year;
        d.population = +d.population;
        d.superficie = +d.superficie;
        d.densidad = (d.population / d.superficie);
      });

      const x = d3.scaleTime()
        .domain([d3.min(municipioData, d => d.year), d3.max(municipioData, d => d.year)])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(municipioData, d => d.densidad) * 1.5])
        .range([height, 0]);

      const lineGenerator = d3.line()
        .x(d => x(d.year))
        .y(d => y(d.densidad));

      svg.append("g")
        .attr("class", "axis axis-x")
        .attr("transform", `translate(0,${height})`)
        .call(d3.axisBottom(x).tickFormat(d => d).ticks(13));

      svg.append("g")
        .attr("class", "axis axis-y")
        .call(d3.axisLeft(y).tickFormat(d => d + " hab/km²").tickSize(-width).ticks(6));

      svg.append("path")
        .datum(municipioData)
        .attr("class", "lines")
        .attr("d", lineGenerator);

      // Añadir mensaje de desierto demográfico si aplica
      const desertDemographic = municipioData.map(d => d.densidad);

      if (desertDemographic.some(d => d < 10) && desertDemographic[desertDemographic.length - 1] < 10) {
        container.append("div")
          .attr("class", "rect-desert-demographic")
          .html(`<span>Una densidad inferior a 10hab/km² convierte al municipio en un desierto demógrafico.</span>`)
          .style("position", "absolute")
          .style("top", "50px")
          .style("left", "70%");
      }
    });
  });
</script>
